// Code generated by protoc-gen-go. DO NOT EDIT.
// source: Test.proto

/*
Package test is a generated protocol buffer package.

It is generated from these files:
	Test.proto

It has these top-level messages:
	TestReq1
	TestRsp1
	TestReq2
	TestRsp2
*/
package test

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// service bigcmd
type BIG_CMD int32

const (
	BIG_CMD_TEST_SVR BIG_CMD = 4096
)

var BIG_CMD_name = map[int32]string{
	4096: "TEST_SVR",
}
var BIG_CMD_value = map[string]int32{
	"TEST_SVR": 4096,
}

func (x BIG_CMD) Enum() *BIG_CMD {
	p := new(BIG_CMD)
	*p = x
	return p
}
func (x BIG_CMD) String() string {
	return proto.EnumName(BIG_CMD_name, int32(x))
}
func (x *BIG_CMD) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(BIG_CMD_value, data, "BIG_CMD")
	if err != nil {
		return err
	}
	*x = BIG_CMD(value)
	return nil
}
func (BIG_CMD) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// service subcmd
type SUB_CMD int32

const (
	SUB_CMD_TEST_INTERFACE_1 SUB_CMD = 257
	SUB_CMD_TEST_INTERFACE_2 SUB_CMD = 258
)

var SUB_CMD_name = map[int32]string{
	257: "TEST_INTERFACE_1",
	258: "TEST_INTERFACE_2",
}
var SUB_CMD_value = map[string]int32{
	"TEST_INTERFACE_1": 257,
	"TEST_INTERFACE_2": 258,
}

func (x SUB_CMD) Enum() *SUB_CMD {
	p := new(SUB_CMD)
	*p = x
	return p
}
func (x SUB_CMD) String() string {
	return proto.EnumName(SUB_CMD_name, int32(x))
}
func (x *SUB_CMD) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SUB_CMD_value, data, "SUB_CMD")
	if err != nil {
		return err
	}
	*x = SUB_CMD(value)
	return nil
}
func (SUB_CMD) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// req1
type TestReq1 struct {
	Id               *uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *TestReq1) Reset()                    { *m = TestReq1{} }
func (m *TestReq1) String() string            { return proto.CompactTextString(m) }
func (*TestReq1) ProtoMessage()               {}
func (*TestReq1) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *TestReq1) GetId() uint32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

// rsp1
type TestRsp1 struct {
	Msg              *string `protobuf:"bytes,1,opt,name=msg" json:"msg,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *TestRsp1) Reset()                    { *m = TestRsp1{} }
func (m *TestRsp1) String() string            { return proto.CompactTextString(m) }
func (*TestRsp1) ProtoMessage()               {}
func (*TestRsp1) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *TestRsp1) GetMsg() string {
	if m != nil && m.Msg != nil {
		return *m.Msg
	}
	return ""
}

// req2
type TestReq2 struct {
	Id               *uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *TestReq2) Reset()                    { *m = TestReq2{} }
func (m *TestReq2) String() string            { return proto.CompactTextString(m) }
func (*TestReq2) ProtoMessage()               {}
func (*TestReq2) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *TestReq2) GetId() uint32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

// rsp2
type TestRsp2 struct {
	Msg              *string `protobuf:"bytes,1,opt,name=msg" json:"msg,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *TestRsp2) Reset()                    { *m = TestRsp2{} }
func (m *TestRsp2) String() string            { return proto.CompactTextString(m) }
func (*TestRsp2) ProtoMessage()               {}
func (*TestRsp2) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *TestRsp2) GetMsg() string {
	if m != nil && m.Msg != nil {
		return *m.Msg
	}
	return ""
}

func init() {
	proto.RegisterType((*TestReq1)(nil), "test.TestReq1")
	proto.RegisterType((*TestRsp1)(nil), "test.TestRsp1")
	proto.RegisterType((*TestReq2)(nil), "test.TestReq2")
	proto.RegisterType((*TestRsp2)(nil), "test.TestRsp2")
	proto.RegisterEnum("test.BIG_CMD", BIG_CMD_name, BIG_CMD_value)
	proto.RegisterEnum("test.SUB_CMD", SUB_CMD_name, SUB_CMD_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for TestSvr service

type TestSvrClient interface {
	// rpc1 test
	CallTestInterface1(ctx context.Context, in *TestReq1, opts ...grpc.CallOption) (*TestRsp1, error)
	// rpc2 test
	CallTestInterface2(ctx context.Context, in *TestReq2, opts ...grpc.CallOption) (*TestRsp2, error)
}

type testSvrClient struct {
	cc *grpc.ClientConn
}

func NewTestSvrClient(cc *grpc.ClientConn) TestSvrClient {
	return &testSvrClient{cc}
}

func (c *testSvrClient) CallTestInterface1(ctx context.Context, in *TestReq1, opts ...grpc.CallOption) (*TestRsp1, error) {
	out := new(TestRsp1)
	err := grpc.Invoke(ctx, "/test.TestSvr/CallTestInterface1", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testSvrClient) CallTestInterface2(ctx context.Context, in *TestReq2, opts ...grpc.CallOption) (*TestRsp2, error) {
	out := new(TestRsp2)
	err := grpc.Invoke(ctx, "/test.TestSvr/CallTestInterface2", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TestSvr service

type TestSvrServer interface {
	// rpc1 test
	CallTestInterface1(context.Context, *TestReq1) (*TestRsp1, error)
	// rpc2 test
	CallTestInterface2(context.Context, *TestReq2) (*TestRsp2, error)
}

func RegisterTestSvrServer(s *grpc.Server, srv TestSvrServer) {
	s.RegisterService(&_TestSvr_serviceDesc, srv)
}

func _TestSvr_CallTestInterface1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestReq1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestSvrServer).CallTestInterface1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.TestSvr/CallTestInterface1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestSvrServer).CallTestInterface1(ctx, req.(*TestReq1))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestSvr_CallTestInterface2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestReq2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestSvrServer).CallTestInterface2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.TestSvr/CallTestInterface2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestSvrServer).CallTestInterface2(ctx, req.(*TestReq2))
	}
	return interceptor(ctx, in, info, handler)
}

var _TestSvr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "test.TestSvr",
	HandlerType: (*TestSvrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CallTestInterface1",
			Handler:    _TestSvr_CallTestInterface1_Handler,
		},
		{
			MethodName: "CallTestInterface2",
			Handler:    _TestSvr_CallTestInterface2_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Test.proto",
}

func init() { proto.RegisterFile("Test.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 201 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x0a, 0x49, 0x2d, 0x2e,
	0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x29, 0x49, 0x2d, 0x2e, 0x51, 0x12, 0xe3, 0xe2,
	0x00, 0x89, 0x05, 0xa5, 0x16, 0x1a, 0x0a, 0x71, 0x71, 0x31, 0x65, 0xa6, 0x48, 0x30, 0x2a, 0x30,
	0x6a, 0xf0, 0x2a, 0x89, 0x43, 0xc5, 0x8b, 0x0b, 0x0c, 0x85, 0xb8, 0xb9, 0x98, 0x73, 0x8b, 0xd3,
	0xc1, 0x12, 0x9c, 0x48, 0x1a, 0x8c, 0x70, 0x68, 0x30, 0x42, 0xd1, 0xa0, 0x25, 0xc1, 0xc5, 0xee,
	0xe4, 0xe9, 0x1e, 0xef, 0xec, 0xeb, 0x22, 0xc4, 0xcb, 0xc5, 0x11, 0xe2, 0x1a, 0x1c, 0x12, 0x1f,
	0x1c, 0x16, 0x24, 0xd0, 0xa0, 0xa0, 0x65, 0xce, 0xc5, 0x1e, 0x1c, 0xea, 0x04, 0x96, 0x11, 0xe5,
	0x12, 0x00, 0xcb, 0x78, 0xfa, 0x85, 0xb8, 0x06, 0xb9, 0x39, 0x3a, 0xbb, 0xc6, 0x1b, 0x0a, 0x34,
	0x32, 0x61, 0x11, 0x36, 0x12, 0x68, 0x62, 0x32, 0x2a, 0xe5, 0x62, 0x07, 0xd9, 0x15, 0x5c, 0x56,
	0x24, 0x64, 0xc2, 0x25, 0xe4, 0x9c, 0x98, 0x93, 0x03, 0xe2, 0x7a, 0xe6, 0x95, 0xa4, 0x16, 0xa5,
	0x25, 0x26, 0xa7, 0x1a, 0x0a, 0xf1, 0xe9, 0x81, 0x3c, 0xa7, 0x07, 0xf3, 0x99, 0x14, 0x32, 0x1f,
	0xe4, 0x23, 0x6c, 0xba, 0x8c, 0xd0, 0x74, 0x19, 0xa1, 0xe9, 0x32, 0x02, 0x04, 0x00, 0x00, 0xff,
	0xff, 0xd0, 0xbb, 0xe7, 0xaf, 0x3e, 0x01, 0x00, 0x00,
}
